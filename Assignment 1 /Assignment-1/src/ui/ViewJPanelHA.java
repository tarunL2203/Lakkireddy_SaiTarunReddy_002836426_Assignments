/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.HomeAddressC;
import model.HomeAddressLog;

/**
 *
 * @author saitarunreddylakkireddy
 */
public class ViewJPanelHA extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanelHA
     */
    HomeAddressLog halog;
    
    public ViewJPanelHA(HomeAddressLog halog) {
        initComponents();
        this.halog = halog;
        
        populateAddresses();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblViewHA = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        txtZIP = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        lblStreetAddress = new javax.swing.JLabel();
        lblState = new javax.swing.JLabel();
        lblZIP = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtStreetAddress = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHA = new javax.swing.JTable();
        btnViewHA = new javax.swing.JButton();
        btnDeleteHA = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 255));

        lblViewHA.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblViewHA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblViewHA.setText("View Home Address");

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        txtZIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtZIPActionPerformed(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblCity.setText("City");

        lblStreetAddress.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblStreetAddress.setText("Street Address");

        lblState.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblState.setText("State");

        lblZIP.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblZIP.setText("ZIP");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtStreetAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStreetAddressActionPerformed(evt);
            }
        });

        txtState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStateActionPerformed(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblName.setText("Name");

        tblHA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Street Address", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHA);

        btnViewHA.setText("View");
        btnViewHA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHAActionPerformed(evt);
            }
        });

        btnDeleteHA.setText("Delete");
        btnDeleteHA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteHAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblZIP)
                            .addComponent(lblState)
                            .addComponent(lblCity)
                            .addComponent(lblStreetAddress)
                            .addComponent(lblName))
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtZIP, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnViewHA)
                        .addGap(183, 183, 183))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDeleteHA)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(lblViewHA, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(59, 59, 59)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblViewHA)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewHA)
                    .addComponent(btnDeleteHA))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStreetAddress)
                    .addComponent(txtStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblState)
                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZIP)
                    .addComponent(txtZIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(120, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void txtZIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtZIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtZIPActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtStreetAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStreetAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStreetAddressActionPerformed

    private void txtStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStateActionPerformed

    private void btnViewHAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHAActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHA.getSelectedRow();
        if (selectedRowIndex<0) { 
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            
                
        }
        DefaultTableModel model = (DefaultTableModel)   tblHA.getModel();
       HomeAddressC selectedAddress = (HomeAddressC) model.getValueAt(selectedRowIndex, 0);
       
       txtName.setText(selectedAddress.getName());
       txtStreetAddress.setText(selectedAddress.getStreetAddress());
       txtCity.setText(selectedAddress.getCity());
       txtState.setText(selectedAddress.getState());
       txtZIP.setText(selectedAddress.getZip());
       
       
        
    }//GEN-LAST:event_btnViewHAActionPerformed

    private void btnDeleteHAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteHAActionPerformed
        // TODO add your handling code here:
        
         int selectedRowIndex = tblHA.getSelectedRow();
        if (selectedRowIndex<0) { 
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
                
        }
        DefaultTableModel model = (DefaultTableModel)   tblHA.getModel();
       HomeAddressC selectedAddress = (HomeAddressC) model.getValueAt(selectedRowIndex, 0);
         halog.deleteAddress(selectedAddress);
        JOptionPane.showMessageDialog(this, "This Address has been deleted.");
        
        populateAddresses();
        
          txtName.setText("");
        txtStreetAddress.setText("");
        txtState.setText("");
        txtCity.setText("");
        txtZIP.setText(""); 
        
    }//GEN-LAST:event_btnDeleteHAActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteHA;
    private javax.swing.JButton btnViewHA;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblStreetAddress;
    private javax.swing.JLabel lblViewHA;
    private javax.swing.JLabel lblZIP;
    private javax.swing.JTable tblHA;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtStreetAddress;
    private javax.swing.JTextField txtZIP;
    // End of variables declaration//GEN-END:variables

    private void populateAddresses() {
     DefaultTableModel model = (DefaultTableModel) tblHA.getModel();
     model.setRowCount(0);
     for (HomeAddressC vs : halog.getHalog()) {
         Object[] row = new Object[3];
         row[0] = vs;
         row[1] = vs.getStreetAddress();
         row[2] = vs.getCity();
         
         model.addRow(row); 
     
         
   }
}
}

